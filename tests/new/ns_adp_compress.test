#
# The contents of this file are subject to the AOLserver Public License
# Version 1.1 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://aolserver.com/.
#
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See
# the License for the specific language governing rights and limitations
# under the License.
#
# The Original Code is AOLserver Code and related documentation
# distributed by AOL.
# 
# The Initial Developer of the Original Code is America Online,
# Inc. Portions created by AOL are Copyright (C) 1999 America Online,
# Inc. All Rights Reserved.
#
# Alternatively, the contents of this file may be used under the terms
# of the GNU General Public License (the "GPL"), in which case the
# provisions of GPL are applicable instead of those above.  If you wish
# to allow use of your version of this file only under the terms of the
# GPL and not to allow others to use your version of this file under the
# License, indicate your decision by deleting the provisions above and
# replace them with the notice and other provisions required by the GPL.
# If you do not delete the provisions above, a recipient may use your
# version of this file under either the License or the GPL.
# 
#
# $Header$
#

source harness.tcl
load libnsd.so

package require tcltest 2.2
namespace import -force ::tcltest::*

if {[info exists ::env(AOLSERVER_HTTP_TEST)]} {
    testConstraint serverTests true
} else {
    puts "
    To enable HTTP compliance tests, set environment variable
    AOLSERVER_HTTP_TEST=hostname:port of the server running
    http-test-config.tcl.
"
}

if {[testConstraint serverTests]} {
    foreach {host port} [split $::env(AOLSERVER_HTTP_TEST) :] break
}

set setup {
    set sock [socket $host $port]
    fconfigure $sock -translation binary -encoding binary -buffering none
}
set cleanup {
    close $sock
}

set test 0
test ns_adp_compress-1.[incr test] {fetch compressed page w/o Accept-Encoding} \
    -constraints serverTests -setup $setup -body {
    puts $sock "GET /ns_adp_compress.adp HTTP/1.0\n"
    set response [read $sock]
    set lines [split $response "\n"]
    assertEquals "HTTP/1.0 200 OK\r" [lindex $lines 0]
    assertEquals 0 [string match "Content-Encoding: gzip" $response]
} -cleanup $cleanup -result {}

test ns_adp_compress-1.[incr test] {fetch compressed page w/ Accept-Encoding} \
    -constraints serverTests -setup $setup -body {
    puts $sock "GET /ns_adp_compress.adp HTTP/1.0"
    puts $sock "Accept-Encoding: gzip\n"
    set response [read $sock]
    set lines [split $response "\n"]
    assertEquals "HTTP/1.0 200 OK\r" [lindex $lines 0]
    assertEquals 1 [string match "*\r\nContent-Encoding: gzip\r\n*" $response]

    set gzipBytes [list 1f 8b 08 00 00 00 00 00 00 03 2b c9 c8 2c 56 00 \
    a2 44 85 92 d4 e2 12 2e 2e 00 30 7d 05 2a c1 1c 72 c8 00 00 00 10]
    set responseBytes [list]
    foreach {start end} \
        [lindex [regexp -inline -indices "\r\n\r\n" $response] 0] break
    if {$end ne ""} {
        incr end
        binary scan [string range $response $end end] "H*" values
        set responseBytes [regexp -all -inline {..} $values]
    } else {
        set responseBytes $response
    }
    assertEquals $gzipBytes $responseBytes
} -cleanup $cleanup -result {}

cleanupTests
